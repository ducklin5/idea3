#include <unordered_map>
#include <unordered_set>
#include <vector>
#include <set>
#include <iostream>

using namespace std;

struct Relation;


struct Cell{
	int i;
	int j;
	int n;
	int k;
	unordered_set<Relation> related;
	Cell(int ivar, int jvar, int nvar = 0, int kvar = 0) {
		i = ivar;
		j = jvar;
		k = kvar;
		n = nvar;
	}
	friend std::ostream& operator<<(std::ostream&, const Cell&);
};

ostream& operator<< (ostream& os, const Cell& sElem) {
	os << sElem.i << ", " << sElem.j << " [" << sElem.k << "]";
	return os;
}

struct Relation{
	Cell* stop;
	int k;
}

class CellGraph{
	public:
		void addCell(Cell inCell){
			cells.insert(inCell);
		}
		void addRelation(Cell cellA, Cell cellB){
			addCell(&cellA);
			addCell(&cellB);
			graph[cellA].insert(cellB);
			graph[cellB].insert(cellA);
		}
		
		vector<Cell> getCells() {
			return &cells;
		}

		void print(){
			for(auto elem: cell){
				cout << elem;
				cout << " --> ";
				for(auto rElem:elem.relations){
					cout << *rElem.end;
					cout << "; ";
				}
				cout << "\n";
			}
		}
	private:
		unordered_set<Cell> cells;
};

//int main(){
//	cGraph sdk;
//	Cell someCell(0,0,0);
//	sdk.addCell(someCell);
//	Cell someCell2(1,0,0);
//	sdk.addCell(someCell2);
//	sdk.addRelation(someCell, someCell2);
//
//	sdk.printGraph();
//
//
//}
